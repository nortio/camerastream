// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/quickjpeg.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class QuickjpegBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  QuickjpegBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  QuickjpegBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  /// Initializes the turbojpeg library
  int init() {
    return _init();
  }

  late final _initPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('init');
  late final _init = _initPtr.asFunction<int Function()>();

  /// Compresses separate YUV planes (YUV420) directly with turbojpeg
  Span compress_image(
    ffi.Pointer<ffi.Uint8> y,
    int y_len,
    int y_stride,
    ffi.Pointer<ffi.Uint8> u,
    int u_len,
    int u_stride,
    ffi.Pointer<ffi.Uint8> v,
    int v_len,
    int v_stride,
    int width,
    int height,
  ) {
    return _compress_image(
      y,
      y_len,
      y_stride,
      u,
      u_len,
      u_stride,
      v,
      v_len,
      v_stride,
      width,
      height,
    );
  }

  late final _compress_imagePtr =
      _lookup<
        ffi.NativeFunction<
          Span Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Int,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Int,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Int,
            ffi.Int,
            ffi.Int,
          )
        >
      >('compress_image');
  late final _compress_image = _compress_imagePtr
      .asFunction<
        Span Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          int,
        )
      >();

  /// Compresses separate YUV planes by first converting them to ARGB with libyuv
  /// and then compressing them as ARGB
  Span compress_image_libyuv(
    ffi.Pointer<ffi.Uint8> y,
    int y_len,
    int y_stride,
    ffi.Pointer<ffi.Uint8> u,
    int u_len,
    int u_stride,
    ffi.Pointer<ffi.Uint8> v,
    int v_len,
    int v_stride,
    int width,
    int height,
  ) {
    return _compress_image_libyuv(
      y,
      y_len,
      y_stride,
      u,
      u_len,
      u_stride,
      v,
      v_len,
      v_stride,
      width,
      height,
    );
  }

  late final _compress_image_libyuvPtr =
      _lookup<
        ffi.NativeFunction<
          Span Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Int,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Int,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Int,
            ffi.Int,
            ffi.Int,
          )
        >
      >('compress_image_libyuv');
  late final _compress_image_libyuv = _compress_image_libyuvPtr
      .asFunction<
        Span Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          int,
        )
      >();

  /// Compresses weird YUV planes output by the camera plugin by first converting
  /// them manually to ARGB
  Span compress_image_manual(
    ffi.Pointer<ffi.Uint8> y,
    int y_len,
    int y_stride,
    int y_pixel_stride,
    ffi.Pointer<ffi.Uint8> u,
    int u_len,
    int u_stride,
    int u_pixel_stride,
    ffi.Pointer<ffi.Uint8> v,
    int v_len,
    int v_stride,
    int v_pixel_stride,
    int width,
    int height,
  ) {
    return _compress_image_manual(
      y,
      y_len,
      y_stride,
      y_pixel_stride,
      u,
      u_len,
      u_stride,
      u_pixel_stride,
      v,
      v_len,
      v_stride,
      v_pixel_stride,
      width,
      height,
    );
  }

  late final _compress_image_manualPtr =
      _lookup<
        ffi.NativeFunction<
          Span Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Int,
            ffi.Int,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Int,
            ffi.Int,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Int,
            ffi.Int,
            ffi.Int,
            ffi.Int,
          )
        >
      >('compress_image_manual');
  late final _compress_image_manual = _compress_image_manualPtr
      .asFunction<
        Span Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          int,
          int,
        )
      >();

  /// Converts NV12 to XRGB and compresses that
  Span compress_nv12(
    ffi.Pointer<ffi.Uint8> dest,
    int dest_stride,
    ffi.Pointer<ffi.Uint8> y,
    int y_len,
    int y_stride,
    ffi.Pointer<ffi.Uint8> uv,
    int uv_len,
    int uv_stride,
    int width,
    int height,
  ) {
    return _compress_nv12(
      dest,
      dest_stride,
      y,
      y_len,
      y_stride,
      uv,
      uv_len,
      uv_stride,
      width,
      height,
    );
  }

  late final _compress_nv12Ptr =
      _lookup<
        ffi.NativeFunction<
          Span Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Int,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Int,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Int,
            ffi.Int,
            ffi.Int,
          )
        >
      >('compress_nv12');
  late final _compress_nv12 = _compress_nv12Ptr
      .asFunction<
        Span Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          int,
        )
      >();

  /// Compresses RGB images (without alpha)
  Span compress_rgb(
    ffi.Pointer<ffi.Uint8> src,
    int src_stride,
    int width,
    int height,
  ) {
    return _compress_rgb(src, src_stride, width, height);
  }

  late final _compress_rgbPtr =
      _lookup<
        ffi.NativeFunction<
          Span Function(ffi.Pointer<ffi.Uint8>, ffi.Int, ffi.Int, ffi.Int)
        >
      >('compress_rgb');
  late final _compress_rgb = _compress_rgbPtr
      .asFunction<Span Function(ffi.Pointer<ffi.Uint8>, int, int, int)>();
}

final class Span extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> data;

  @ffi.Size()
  external int len;
}
